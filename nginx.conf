user  nginx;
worker_processes  1;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
  worker_connections  1024;
}

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  log_format  main  '$remote_addr - $remote_user [$time_local] "$redacted_request_3" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
  map $request $redacted_request_1 {
    ~(^|.*&?)(state=)[^&]*(&.*|$) $1$2[REDACTED]$3;
    default $request;
  }
  map $redacted_request_1 $redacted_request_2 {
    ~(^|.*&?)(code=)[^&]*(&.*|$) $1$2[REDACTED]$3;
    default $request;
  }
  map $redacted_request_2 $redacted_request_3 {
    ~(^|.*&?)(hd=)[^&]*(&.*|$) $1$2[REDACTED]$3;
    default $request;
  }
  access_log  /var/log/nginx/access.log  main;
  sendfile        on;
  keepalive_timeout  65;
  server {
    listen       $PORT;
    server_name  $SERVER_NAME;
    underscores_in_headers on;

    # Content-Security-Policy header
    # See: https://content-security-policy.com/

    # Allow loading content only from self
    # set $csp "default-src 'self';";

    # Require nonce for loading JavaScript
    # set $csp "${csp} script-src 'nonce-YzEyYTk4ZDlmMGIwMzM1MDllMzYwMTRiOWEwMjAwYzY=' 'strict-dynamic';";
    # set $csp "${csp} font-src 'self' fonts.gstatic.com;";

    # XX NOTE: This CSP currently allows execution of inline CSS.
    # This exposes the site to CSS injection attacks but such an attack
    # should probably not expose Google OAuth2 credentials.
    # See: https://www.c-sharpcorner.com/article/css-injection-exploitation/
    # set $csp "${csp} style-src 'self' fonts.googleapis.com 'unsafe-inline';";

    # Disable plugins and HTML5 video and audio
    # set $csp "${csp} object-src 'none';";
    # set $csp "${csp} media-src 'none';";

    # Disable embedding into frames
    # set $csp "${csp} frame-src 'none';";
    # set $csp "${csp} frame-ancestors 'none';";

    # Prevents changing location of scripts loaded from relative URLs
    # set $csp "${csp} base-uri 'none';";

    # Disables loading from URLs for web workers
    # set $csp "${csp} worker-src 'none';";

    # Enable support for Google avatar images
    # set $csp "${csp} img-src 'self' *.googleusercontent.com;";

    # add_header Content-Security-Policy $csp always;

    location / {
      root   /home/appuser/app/dist;
      index  index.html;
      try_files $uri $uri/ /index.html;
    }

    location /login {
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-NginX-Proxy true;
      proxy_pass http://$API_NAME:$API_PORT/login;
      proxy_ssl_session_reuse off;
      proxy_set_header Host $http_host;
      proxy_cache_bypass $http_upgrade;
      proxy_redirect off;
      proxy_pass_request_headers on;
    }

    location /api/v0 {
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-NginX-Proxy true;
      proxy_pass http://$API_NAME:$API_PORT/api/v0;
      proxy_ssl_session_reuse off;
      proxy_set_header Host $http_host;
      proxy_cache_bypass $http_upgrade;
      proxy_redirect off;
      proxy_pass_request_headers on;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   /usr/share/nginx/html;
    }
  }
}
